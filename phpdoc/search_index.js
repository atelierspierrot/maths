var search_data = {
    'index': {
        'searchIndex': ["maths","maths\\algebra","maths\\arithmetic","maths\\geometry","maths\\helper","maths\\abstractcartesianobject","maths\\algebra\\matrix","maths\\arithmetic\\helper","maths\\cartesian1dinterface","maths\\cartesian2dinterface","maths\\cartesian3dinterface","maths\\cartesianinterface","maths\\geometry\\abstractgeometricobject","maths\\geometry\\angle","maths\\geometry\\circle","maths\\geometry\\line","maths\\geometry\\point","maths\\geometry\\quadrilateral","maths\\geometry\\rectangle","maths\\geometry\\segment","maths\\geometry\\triangle","maths\\geometry\\trianglerectangle","maths\\geometry\\vector","maths\\helper\\jsxgraph","maths\\maths","maths\\point1d","maths\\point2d","maths\\point3d","maths\\pointinterface","maths\\abstractcartesianobject::__construct","maths\\abstractcartesianobject::setspacetype","maths\\abstractcartesianobject::getspacetype","maths\\abstractcartesianobject::is1d","maths\\abstractcartesianobject::is2d","maths\\abstractcartesianobject::is3d","maths\\abstractcartesianobject::__set","maths\\abstractcartesianobject::__get","maths\\abstractcartesianobject::__isset","maths\\abstractcartesianobject::__unset","maths\\abstractcartesianobject::offsetexists","maths\\abstractcartesianobject::offsetget","maths\\abstractcartesianobject::offsetset","maths\\abstractcartesianobject::offsetunset","maths\\abstractcartesianobject::__tostring","maths\\algebra\\matrix::__construct","maths\\algebra\\matrix::__tostring","maths\\algebra\\matrix::reset","maths\\algebra\\matrix::getsize","maths\\algebra\\matrix::setwalkflag","maths\\algebra\\matrix::getwalkflag","maths\\algebra\\matrix::setarrayflag","maths\\algebra\\matrix::getarrayflag","maths\\algebra\\matrix::setemptycell","maths\\algebra\\matrix::getemptycell","maths\\algebra\\matrix::setdata","maths\\algebra\\matrix::getdata","maths\\algebra\\matrix::get","maths\\algebra\\matrix::getx","maths\\algebra\\matrix::gety","maths\\algebra\\matrix::getxy","maths\\algebra\\matrix::getint","maths\\algebra\\matrix::set","maths\\algebra\\matrix::setx","maths\\algebra\\matrix::sety","maths\\algebra\\matrix::setxy","maths\\algebra\\matrix::setint","maths\\algebra\\matrix::rewind","maths\\algebra\\matrix::rewindx","maths\\algebra\\matrix::rewindy","maths\\algebra\\matrix::rewindxy","maths\\algebra\\matrix::previous","maths\\algebra\\matrix::previousx","maths\\algebra\\matrix::previousxexists","maths\\algebra\\matrix::previousy","maths\\algebra\\matrix::previousyexists","maths\\algebra\\matrix::previousxy","maths\\algebra\\matrix::next","maths\\algebra\\matrix::nextx","maths\\algebra\\matrix::nextxexists","maths\\algebra\\matrix::nexty","maths\\algebra\\matrix::nextyexists","maths\\algebra\\matrix::nextxy","maths\\algebra\\matrix::seek","maths\\algebra\\matrix::seekx","maths\\algebra\\matrix::seeky","maths\\algebra\\matrix::seekxy","maths\\algebra\\matrix::seekint","maths\\algebra\\matrix::current","maths\\algebra\\matrix::currentx","maths\\algebra\\matrix::currenty","maths\\algebra\\matrix::currentxy","maths\\algebra\\matrix::key","maths\\algebra\\matrix::keyx","maths\\algebra\\matrix::keyy","maths\\algebra\\matrix::keyxy","maths\\algebra\\matrix::keyint","maths\\algebra\\matrix::valid","maths\\algebra\\matrix::validx","maths\\algebra\\matrix::validy","maths\\algebra\\matrix::validxy","maths\\algebra\\matrix::count","maths\\algebra\\matrix::countx","maths\\algebra\\matrix::county","maths\\algebra\\matrix::countxy","maths\\algebra\\matrix::seektooffset","maths\\algebra\\matrix::seektooffsetinteger","maths\\algebra\\matrix::seektooffsetpositional","maths\\algebra\\matrix::offsetexists","maths\\algebra\\matrix::offsetget","maths\\algebra\\matrix::offsetset","maths\\algebra\\matrix::offsetunset","maths\\algebra\\matrix::serialize","maths\\algebra\\matrix::unserialize","maths\\algebra\\matrix::getline","maths\\algebra\\matrix::getcolumn","maths\\algebra\\matrix::getcell","maths\\algebra\\matrix::issquarematrix","maths\\algebra\\matrix::isrowvector","maths\\algebra\\matrix::iscolumnvector","maths\\algebra\\matrix::__debug","maths\\arithmetic\\helper::factorial","maths\\arithmetic\\helper::asfloat","maths\\arithmetic\\helper::modulo","maths\\arithmetic\\helper::getmodulofromentirepart","maths\\arithmetic\\helper::getmodulousingtruncation","maths\\arithmetic\\helper::isnarcissicnumber","maths\\arithmetic\\helper::isarmstrongnumber","maths\\arithmetic\\helper::ishappynumber","maths\\cartesian1dinterface::getdistance","maths\\cartesian2dinterface::getarea","maths\\cartesian2dinterface::getperimeter","maths\\cartesian3dinterface::getvolume","maths\\cartesianinterface::isvalidpoint","maths\\geometry\\abstractgeometricobject::__construct","maths\\geometry\\abstractgeometricobject::setpoint","maths\\geometry\\abstractgeometricobject::getpoint","maths\\geometry\\abstractgeometricobject::getsegment","maths\\geometry\\abstractgeometricobject::__set","maths\\geometry\\abstractgeometricobject::__get","maths\\geometry\\abstractgeometricobject::__isset","maths\\geometry\\abstractgeometricobject::__unset","maths\\geometry\\angle::__construct","maths\\geometry\\angle::__tostring","maths\\geometry\\angle::__equationtostring","maths\\geometry\\angle::setpointa","maths\\geometry\\angle::getpointa","maths\\geometry\\angle::setpointb","maths\\geometry\\angle::getpointb","maths\\geometry\\angle::setpointc","maths\\geometry\\angle::getpointc","maths\\geometry\\angle::setangle","maths\\geometry\\angle::getangle","maths\\geometry\\angle::setanglebydeg","maths\\geometry\\angle::setanglebyrad","maths\\geometry\\angle::getangletodeg","maths\\geometry\\angle::getangletorad","maths\\geometry\\angle::isright","maths\\geometry\\angle::isstraight","maths\\geometry\\angle::isacute","maths\\geometry\\angle::isobtuse","maths\\geometry\\angle::isreflex","maths\\geometry\\circle::__construct","maths\\geometry\\circle::__tostring","maths\\geometry\\circle::setradius","maths\\geometry\\circle::getradius","maths\\geometry\\circle::setpointo","maths\\geometry\\circle::getpointo","maths\\geometry\\circle::getdiameter","maths\\geometry\\circle::getarea","maths\\geometry\\circle::getperimeter","maths\\geometry\\line::__construct","maths\\geometry\\line::__tostring","maths\\geometry\\line::setpointa","maths\\geometry\\line::getpointa","maths\\geometry\\line::setpointb","maths\\geometry\\line::getpointb","maths\\geometry\\line::getslope","maths\\geometry\\line::getyintercept","maths\\geometry\\line::rearrange","maths\\geometry\\line::isvertical","maths\\geometry\\line::ishorizontal","maths\\geometry\\line::isvalidpoint","maths\\geometry\\line::getordinatebyabscissa","maths\\geometry\\line::getabscissabyordinate","maths\\geometry\\point::__construct","maths\\geometry\\point::__tostring","maths\\geometry\\quadrilateral::__construct","maths\\geometry\\quadrilateral::__tostring","maths\\geometry\\quadrilateral::setpointa","maths\\geometry\\quadrilateral::getpointa","maths\\geometry\\quadrilateral::setpointb","maths\\geometry\\quadrilateral::getpointb","maths\\geometry\\quadrilateral::setpointc","maths\\geometry\\quadrilateral::getpointc","maths\\geometry\\quadrilateral::setpointd","maths\\geometry\\quadrilateral::getpointd","maths\\geometry\\quadrilateral::getsegmentab","maths\\geometry\\quadrilateral::getsegmentbc","maths\\geometry\\quadrilateral::getsegmentcd","maths\\geometry\\quadrilateral::getsegmentda","maths\\geometry\\quadrilateral::getsegmentac","maths\\geometry\\quadrilateral::getsegmentbd","maths\\geometry\\quadrilateral::getfirstdiagonal","maths\\geometry\\quadrilateral::getseconddiagonal","maths\\geometry\\quadrilateral::isparallelogram","maths\\geometry\\rectangle::__construct","maths\\geometry\\rectangle::getwidth","maths\\geometry\\rectangle::getheight","maths\\geometry\\rectangle::getarea","maths\\geometry\\rectangle::getperimeter","maths\\geometry\\rectangle::createfromcoordinates","maths\\geometry\\segment::__tostring","maths\\geometry\\segment::getlength","maths\\geometry\\segment::getcenter","maths\\geometry\\triangle::__construct","maths\\geometry\\triangle::__tostring","maths\\geometry\\triangle::setpointa","maths\\geometry\\triangle::getpointa","maths\\geometry\\triangle::setpointb","maths\\geometry\\triangle::getpointb","maths\\geometry\\triangle::setpointc","maths\\geometry\\triangle::getpointc","maths\\geometry\\triangle::getsegmentab","maths\\geometry\\triangle::getsegmentbc","maths\\geometry\\triangle::getsegmentca","maths\\geometry\\trianglerectangle::__construct","maths\\geometry\\trianglerectangle::createfromwidthandalpha","maths\\geometry\\trianglerectangle::getalpha","maths\\geometry\\trianglerectangle::getbeta","maths\\geometry\\trianglerectangle::gethypotenuse","maths\\geometry\\trianglerectangle::getarea","maths\\geometry\\trianglerectangle::getperimeter","maths\\geometry\\trianglerectangle::__tostring","maths\\geometry\\vector::__tostring","maths\\geometry\\vector::__equationtostring","maths\\geometry\\vector::setorigin","maths\\geometry\\vector::getorigin","maths\\geometry\\vector::getdirection","maths\\geometry\\vector::getmagnitude","maths\\geometry\\vector::isnull","maths\\geometry\\vector::createfromorigin","maths\\helper\\jsxgraph::__construct","maths\\helper\\jsxgraph::__tostring","maths\\helper\\jsxgraph::setoptions","maths\\helper\\jsxgraph::getoptions","maths\\helper\\jsxgraph::getoptionsbyprefix","maths\\helper\\jsxgraph::getoption","maths\\helper\\jsxgraph::resetoutput","maths\\helper\\jsxgraph::addoutput","maths\\helper\\jsxgraph::getoutput","maths\\helper\\jsxgraph::addpoint","maths\\helper\\jsxgraph::getpoint","maths\\helper\\jsxgraph::init","maths\\helper\\jsxgraph::drawboard","maths\\helper\\jsxgraph::drawpoint","maths\\helper\\jsxgraph::draworigin","maths\\helper\\jsxgraph::drawhorizontalpoint","maths\\helper\\jsxgraph::drawverticalpoint","maths\\helper\\jsxgraph::drawsegment","maths\\helper\\jsxgraph::drawquadrilateral","maths\\helper\\jsxgraph::drawcircle","maths\\helper\\jsxgraph::demonstratethales","maths\\maths::coordinatestostring","maths\\maths::segmenttostring","maths\\maths::polygontostring","maths\\maths::aresamespace","maths\\maths::aresamepoint","maths\\maths::getlinesintersection","maths\\maths::areperpendiculars","maths\\maths::areparallels","maths\\maths::getdirectionbypoints","maths\\maths::getdirectionbycoordinates","maths\\point1d::__construct","maths\\point1d::__tostring","maths\\point1d::setabscissa","maths\\point1d::getabscissa","maths\\point2d::__construct","maths\\point2d::__tostring","maths\\point2d::setordinate","maths\\point2d::getordinate","maths\\point3d::__construct","maths\\point3d::__tostring","maths\\point3d::setapplicate","maths\\point3d::getapplicate"],
        'info': [["Maths","","Maths.html","","",3],["Maths\\Algebra","","Maths\/Algebra.html","","",3],["Maths\\Arithmetic","","Maths\/Arithmetic.html","","",3],["Maths\\Geometry","","Maths\/Geometry.html","","",3],["Maths\\Helper","","Maths\/Helper.html","","",3],["AbstractCartesianObject","Maths","Maths\/AbstractCartesianObject.html","","",1],["Matrix","Maths\\Algebra","Maths\/Algebra\/Matrix.html","","Class Matrix",1],["Helper","Maths\\Arithmetic","Maths\/Arithmetic\/Helper.html","","Basic class for arithemtic",1],["Cartesian1DInterface","Maths","Maths\/Cartesian1DInterface.html","","Basic 1D objects interface",1],["Cartesian2DInterface","Maths","Maths\/Cartesian2DInterface.html","","Basic 2D objects interface",1],["Cartesian3DInterface","Maths","Maths\/Cartesian3DInterface.html","","Basic 3D objects interface",1],["CartesianInterface","Maths","Maths\/CartesianInterface.html","","Basic geometric objects interface",1],["AbstractGeometricObject","Maths\\Geometry","Maths\/Geometry\/AbstractGeometricObject.html"," < AbstractCartesianObject","",1],["Angle","Maths\\Geometry","Maths\/Geometry\/Angle.html"," < AbstractGeometricObject","Class Angle",1],["Circle","Maths\\Geometry","Maths\/Geometry\/Circle.html"," < AbstractGeometricObject","Class Circle",1],["Line","Maths\\Geometry","Maths\/Geometry\/Line.html"," < AbstractGeometricObject","Line class : two points A -> B not limited",1],["Point","Maths\\Geometry","Maths\/Geometry\/Point.html"," < Point3D","Point class",1],["Quadrilateral","Maths\\Geometry","Maths\/Geometry\/Quadrilateral.html"," < AbstractGeometricObject","Class Quadrilateral",1],["Rectangle","Maths\\Geometry","Maths\/Geometry\/Rectangle.html"," < Quadrilateral","Class Rectangle",1],["Segment","Maths\\Geometry","Maths\/Geometry\/Segment.html"," < Line","Segment class : two points A -> B",1],["Triangle","Maths\\Geometry","Maths\/Geometry\/Triangle.html"," < AbstractGeometricObject","Class Triangle",1],["TriangleRectangle","Maths\\Geometry","Maths\/Geometry\/TriangleRectangle.html"," < Rectangle","Class Rectangle",1],["Vector","Maths\\Geometry","Maths\/Geometry\/Vector.html"," < Segment","Basic Vector",1],["JSXgraph","Maths\\Helper","Maths\/Helper\/JSXgraph.html","","Helper class to use the JSXgraph javascript library",1],["Maths","Maths","Maths\/Maths.html","","Basic class Maths",1],["Point1D","Maths","Maths\/Point1D.html"," < AbstractCartesianObject","Basic 1D point",1],["Point2D","Maths","Maths\/Point2D.html"," < Point1D","Basic 2D point",1],["Point3D","Maths","Maths\/Point3D.html"," < Point2D","Basic 3D point",1],["PointInterface","Maths","Maths\/PointInterface.html","","The point interface",1],["AbstractCartesianObject::__construct","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method___construct","(int $type = Maths::CARTESIAN_2D)","Construction of a cartesian object specify a number",2],["AbstractCartesianObject::setSpaceType","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method_setSpaceType","(int $type)","Define the object cartesian space type (number of dimensions)",2],["AbstractCartesianObject::getSpaceType","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method_getSpaceType","()","Get the object cartesian space type (number of dimensions)",2],["AbstractCartesianObject::is1D","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method_is1D","()","Test if the object is in 1D only",2],["AbstractCartesianObject::is2D","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method_is2D","()","Test if the object is in 2D",2],["AbstractCartesianObject::is3D","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method_is3D","()","Test if the object is in 3D",2],["AbstractCartesianObject::__set","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method___set","(mixed $name, mixed $value)","",2],["AbstractCartesianObject::__get","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method___get","(mixed $name)","",2],["AbstractCartesianObject::__isset","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method___isset","(mixed $name)","",2],["AbstractCartesianObject::__unset","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method___unset","(mixed $name)","",2],["AbstractCartesianObject::offsetExists","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method_offsetExists","(mixed $offset)","Test if an offset exists in the object using array",2],["AbstractCartesianObject::offsetGet","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method_offsetGet","(mixed $offset)","Get an object coordinate using array notation `$obj[offset]`",2],["AbstractCartesianObject::offsetSet","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method_offsetSet","(mixed $offset, mixed $value)","Set an object coordinate using array notation `$obj[offset]",2],["AbstractCartesianObject::offsetUnset","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method_offsetUnset","(mixed $offset)","Set an object coordinate using array notation `unset($obj[offset])`",2],["AbstractCartesianObject::__toString","Maths\\AbstractCartesianObject","Maths\/AbstractCartesianObject.html#method___toString","()","Force children classes to define a way to `echo` an",2],["Matrix::__construct","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method___construct","(array $data = null, int $walk_flag = self::WALK_XY, int $array_flag = self::ARRAY_XY, mixed $empty_cell)","MATRIX constructor",2],["Matrix::__toString","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method___toString","()","Magic method to `echo $object` which returns a 2D representation",2],["Matrix::reset","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_reset","()","Reset object `$data` to its original state",2],["Matrix::getSize","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getSize","(string $which = null)","Get the matrix size",2],["Matrix::setWalkFlag","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_setWalkFlag","(int $flag, bool $auto_rewind = true)","Define the object's walk flag",2],["Matrix::getWalkFlag","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getWalkFlag","()","Get the current object's walk flag",2],["Matrix::setArrayFlag","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_setArrayFlag","(int $flag, bool $auto_rewind = true)","Define the object's array access flag",2],["Matrix::getArrayFlag","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getArrayFlag","()","Get the current object's array access flag",2],["Matrix::setEmptyCell","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_setEmptyCell","(mixed $cell)","Set the empty cell value",2],["Matrix::getEmptyCell","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getEmptyCell","()","Get the empty cell value",2],["Matrix::setData","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_setData","(array $data = null)","Set the matrix contents",2],["Matrix::getData","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getData","()","Get the matrix as array",2],["Matrix::get","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_get","(string|int $index)","Get a cell value by index according to matrix's flags",2],["Matrix::getX","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getX","(string|int $index)","Get `x` value (line) by index",2],["Matrix::getY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getY","(string|int $index)","Get `y` value (column) by index",2],["Matrix::getXY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getXY","(string|int $index)","Get `x:y` value (cell) by positional index",2],["Matrix::getInt","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getInt","(int $index)","Get `x:y` value (cell) by integer index",2],["Matrix::set","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_set","(string|int $index, mixed $value)","Set a value by index according to matrix's flags",2],["Matrix::setX","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_setX","(string|int $index, array $value)","Set `x` value (line) by index",2],["Matrix::setY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_setY","(string|int $index, array $value)","Set `y` value (column) by index",2],["Matrix::setXY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_setXY","(string $index, mixed $value)","Set `x:y` value (cell) by positional index",2],["Matrix::setInt","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_setInt","(int $index, mixed $value)","Set `x:y` value (cell) by integer index",2],["Matrix::rewind","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_rewind","()","Rewind a matrix according to its flag value",2],["Matrix::rewindX","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_rewindX","()","Rewind `x` index to position `1`",2],["Matrix::rewindY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_rewindY","()","Rewind `y` index to position `1`",2],["Matrix::rewindXY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_rewindXY","()","Rewind both `x` and `y` indexes to position `1,1`",2],["Matrix::previous","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_previous","()","Go to previous index according to matrix's flag value",2],["Matrix::previousX","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_previousX","()","Seek to current `x` less 1",2],["Matrix::previousXExists","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_previousXExists","()","Test if current `x` less 1 exists",2],["Matrix::previousY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_previousY","()","Seek to current `y` less 1",2],["Matrix::previousYExists","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_previousYExists","()","Test if current `y` less 1 exists",2],["Matrix::previousXY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_previousXY","()","Seek to previous cell",2],["Matrix::next","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_next","()","Go to next index according to matrix's flag value",2],["Matrix::nextX","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_nextX","()","Seek to current `x` plus 1",2],["Matrix::nextXExists","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_nextXExists","()","Test if current `x` plus 1 exists",2],["Matrix::nextY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_nextY","()","Seek to current `y` plus 1",2],["Matrix::nextYExists","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_nextYExists","()","Test if current `y` plus 1 exists",2],["Matrix::nextXY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_nextXY","()","Go to next cell",2],["Matrix::seek","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_seek","(string $index)","Seek to index according to matrix's flag value",2],["Matrix::seekX","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_seekX","(int $index)","Seek to index for `x` (line)",2],["Matrix::seekY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_seekY","(int $index)","Seek to index for `y` (column)",2],["Matrix::seekXY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_seekXY","(string $index)","Seek to index for `x,y` (cell)",2],["Matrix::seekInt","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_seekInt","(int $index)","Go to index `x,y` represented as an integer (0 based)",2],["Matrix::current","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_current","()","Get current value according to matrix's flag value",2],["Matrix::currentX","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_currentX","()","Get current `x` value (line)",2],["Matrix::currentY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_currentY","()","Get current `y` value (column)",2],["Matrix::currentXY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_currentXY","()","Get current `x:y` value (cell)",2],["Matrix::key","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_key","()","Get current index according to matrix's flag value",2],["Matrix::keyX","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_keyX","(bool $integer = false)","Get current `x` index (line)",2],["Matrix::keyY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_keyY","(bool $integer = false)","Get current `y` index (column)",2],["Matrix::keyXY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_keyXY","(bool $integer = false)","Get current `x,y` index (cell)",2],["Matrix::keyInt","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_keyInt","()","Get current `x,y` index as an integer (0 based)",2],["Matrix::valid","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_valid","()","Test if current value is valid according to matrix's",2],["Matrix::validX","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_validX","()","Test if current `x` line is valid",2],["Matrix::validY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_validY","()","Test if current `y` column is valid",2],["Matrix::validXY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_validXY","()","Test if current `x:y` cell is valid",2],["Matrix::count","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_count","()","Count the number of values according to matrix's flag",2],["Matrix::countX","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_countX","()","Count the number of lines",2],["Matrix::countY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_countY","()","Count the number of columns",2],["Matrix::countXY","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_countXY","()","Count the number of cells",2],["Matrix::seekToOffset","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_seekToOffset","(<abbr title=\"Maths\\Algebra\\int\/string\">int\/string<\/abbr> $offset)","Seek `x` and `y` to an offset",2],["Matrix::seekToOffsetInteger","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_seekToOffsetInteger","(int $offset)","Seek `x` and `y` to an integer offset",2],["Matrix::seekToOffsetPositional","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_seekToOffsetPositional","(<abbr title=\"Maths\\Algebra\\int\/string\">int\/string<\/abbr> $offset)","Seek `x` and `y` to a positional offset",2],["Matrix::offsetExists","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_offsetExists","(<abbr title=\"Maths\\Algebra\\int\/string\">int\/string<\/abbr> $offset)","Test if an offset exists",2],["Matrix::offsetGet","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_offsetGet","(<abbr title=\"Maths\\Algebra\\int\/string\">int\/string<\/abbr> $offset)","Get an offset value",2],["Matrix::offsetSet","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_offsetSet","(<abbr title=\"Maths\\Algebra\\int\/string\">int\/string<\/abbr> $offset, mixed $value)","Set an offset value",2],["Matrix::offsetUnset","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_offsetUnset","(<abbr title=\"Maths\\Algebra\\int\/string\">int\/string<\/abbr> $offset)","Unset an offset value (replacing it by '0')",2],["Matrix::serialize","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_serialize","()","Serialize a matrix: only `$data`, `$_cache` and `$flag`",2],["Matrix::unserialize","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_unserialize","(string $serialized)","Populate a matrix from a serialized array: only `$data`,",2],["Matrix::getLine","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getLine","(int $index = null)","Get a line value (specifying an optional index)",2],["Matrix::getColumn","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getColumn","(int $index = null)","Get a column value (specifying an optional index)",2],["Matrix::getCell","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_getCell","(string $index = null)","Get a cell value (specifying an optional index)",2],["Matrix::isSquareMatrix","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_isSquareMatrix","()","Test if a matrix is a square (number of lines = number",2],["Matrix::isRowVector","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_isRowVector","()","Test if a matrix is a row vector (one single line)",2],["Matrix::isColumnVector","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method_isColumnVector","()","Test if a matrix is a column vector (one single column)",2],["Matrix::__debug","Maths\\Algebra\\Matrix","Maths\/Algebra\/Matrix.html#method___debug","(string $property = null, bool $verbose = false)","Special `__toString()` with infos",2],["Helper::factorial","Maths\\Arithmetic\\Helper","Maths\/Arithmetic\/Helper.html#method_factorial","(<abbr title=\"Maths\\Arithmetic\\$n\">$n<\/abbr> $n)","Calculate the \"factorial\" resolution of a number: `a!`",2],["Helper::asFloat","Maths\\Arithmetic\\Helper","Maths\/Arithmetic\/Helper.html#method_asFloat","(float $a)","Write a number as a float what ever value it is (",2],["Helper::modulo","Maths\\Arithmetic\\Helper","Maths\/Arithmetic\/Helper.html#method_modulo","(<abbr title=\"Maths\\Arithmetic\\$a\">$a<\/abbr> $a, <abbr title=\"Maths\\Arithmetic\\$b\">$b<\/abbr> $b)","Try to get the \"true\" modulo",2],["Helper::getModuloFromEntirePart","Maths\\Arithmetic\\Helper","Maths\/Arithmetic\/Helper.html#method_getModuloFromEntirePart","(<abbr title=\"Maths\\Arithmetic\\$a\">$a<\/abbr> $a, <abbr title=\"Maths\\Arithmetic\\$b\">$b<\/abbr> $b)","This method is an alternative to the native `a % b`",2],["Helper::getModuloUsingTruncation","Maths\\Arithmetic\\Helper","Maths\/Arithmetic\/Helper.html#method_getModuloUsingTruncation","(<abbr title=\"Maths\\Arithmetic\\$a\">$a<\/abbr> $a, <abbr title=\"Maths\\Arithmetic\\$b\">$b<\/abbr> $b)","This method is an alternative to the native `a % b`",2],["Helper::isNarcissicNumber","Maths\\Arithmetic\\Helper","Maths\/Arithmetic\/Helper.html#method_isNarcissicNumber","(<abbr title=\"Maths\\Arithmetic\\$a\">$a<\/abbr> $a)","Test if a number is an \"narcissic\" number: an n-digit",2],["Helper::isArmstrongNumber","Maths\\Arithmetic\\Helper","Maths\/Arithmetic\/Helper.html#method_isArmstrongNumber","(<abbr title=\"Maths\\Arithmetic\\$a\">$a<\/abbr> $a)","",2],["Helper::isHappyNumber","Maths\\Arithmetic\\Helper","Maths\/Arithmetic\/Helper.html#method_isHappyNumber","(<abbr title=\"Maths\\Arithmetic\\$val\">$val<\/abbr> $val, int $iteration)","Test if a number is an \"happy number\":",2],["Cartesian1DInterface::getDistance","Maths\\Cartesian1DInterface","Maths\/Cartesian1DInterface.html#method_getDistance","()","Get the distance between the two points of the objects",2],["Cartesian2DInterface::getArea","Maths\\Cartesian2DInterface","Maths\/Cartesian2DInterface.html#method_getArea","()","Get the area of the object",2],["Cartesian2DInterface::getPerimeter","Maths\\Cartesian2DInterface","Maths\/Cartesian2DInterface.html#method_getPerimeter","()","Get the perimeter of the object",2],["Cartesian3DInterface::getVolume","Maths\\Cartesian3DInterface","Maths\/Cartesian3DInterface.html#method_getVolume","()","Get the volume of the object",2],["CartesianInterface::isValidPoint","Maths\\CartesianInterface","Maths\/CartesianInterface.html#method_isValidPoint","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $a)","Test if point A is part of the object",2],["AbstractGeometricObject::__construct","Maths\\Geometry\\AbstractGeometricObject","Maths\/Geometry\/AbstractGeometricObject.html#method___construct","(int $type = Maths::CARTESIAN_2D)","Construction of a cartesian object specify a number",2],["AbstractGeometricObject::setPoint","Maths\\Geometry\\AbstractGeometricObject","Maths\/Geometry\/AbstractGeometricObject.html#method_setPoint","(string $name, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define (or redefine) a point of the object",2],["AbstractGeometricObject::getPoint","Maths\\Geometry\\AbstractGeometricObject","Maths\/Geometry\/AbstractGeometricObject.html#method_getPoint","(string $name)","Get a point of the object",2],["AbstractGeometricObject::getSegment","Maths\\Geometry\\AbstractGeometricObject","Maths\/Geometry\/AbstractGeometricObject.html#method_getSegment","(string $name1, string|null $name2 = null)","Get a [point1->point2] segment as a `\\Maths\\Geometry\\Segment`",2],["AbstractGeometricObject::__set","Maths\\Geometry\\AbstractGeometricObject","Maths\/Geometry\/AbstractGeometricObject.html#method___set","(mixed $name, mixed $value)","",2],["AbstractGeometricObject::__get","Maths\\Geometry\\AbstractGeometricObject","Maths\/Geometry\/AbstractGeometricObject.html#method___get","(mixed $name)","",2],["AbstractGeometricObject::__isset","Maths\\Geometry\\AbstractGeometricObject","Maths\/Geometry\/AbstractGeometricObject.html#method___isset","(mixed $name)","",2],["AbstractGeometricObject::__unset","Maths\\Geometry\\AbstractGeometricObject","Maths\/Geometry\/AbstractGeometricObject.html#method___unset","(mixed $name)","",2],["Angle::__construct","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method___construct","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_a = null, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_b = null, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_c = null, int $angle = null, int $space_type = Maths::CARTESIAN_2D)","",2],["Angle::__toString","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method___toString","()","Write an angle object as `[alpha=..]`",2],["Angle::__equationToString","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method___equationToString","()","Write an algebraic function of the angle This will",2],["Angle::setPointA","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_setPointA","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point A of the quadrilateral",2],["Angle::getPointA","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_getPointA","()","Get the A point of the quadrilateral",2],["Angle::setPointB","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_setPointB","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point B of the quadrilateral",2],["Angle::getPointB","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_getPointB","()","Get the B point of the quadrilateral",2],["Angle::setPointC","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_setPointC","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point C of the quadrilateral",2],["Angle::getPointC","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_getPointC","()","Get the C point of the quadrilateral",2],["Angle::setAngle","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_setAngle","(int $val)","Define the angle value (in degrees)",2],["Angle::getAngle","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_getAngle","()","Get the angle value (in degrees by default)",2],["Angle::setAngleByDeg","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_setAngleByDeg","(int $val)","Define the angle value in degrees",2],["Angle::setAngleByRad","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_setAngleByRad","(int $val)","Define the angle value in radians",2],["Angle::getAngleToDeg","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_getAngleToDeg","()","Get the angle value in degrees (default)",2],["Angle::getAngleToRad","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_getAngleToRad","()","Get the angle value in radians",2],["Angle::isRight","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_isRight","()","Test if the angle is right (90\u00b0)",2],["Angle::isStraight","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_isStraight","()","Test if the angle is straight (180\u00b0)",2],["Angle::isAcute","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_isAcute","()","Test if the angle is acute (< 90\u00b0)",2],["Angle::isObtuse","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_isObtuse","()","Test if the angle is obtuse (90\u00b0 < 180\u00b0)",2],["Angle::isReflex","Maths\\Geometry\\Angle","Maths\/Geometry\/Angle.html#method_isReflex","()","Test if the angle is reflex (180\u00b0 < 360\u00b0)",2],["Circle::__construct","Maths\\Geometry\\Circle","Maths\/Geometry\/Circle.html#method___construct","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_o = null, null|int $radius = null, int $space_type = Maths::CARTESIAN_2D)","",2],["Circle::__toString","Maths\\Geometry\\Circle","Maths\/Geometry\/Circle.html#method___toString","()","",2],["Circle::setRadius","Maths\\Geometry\\Circle","Maths\/Geometry\/Circle.html#method_setRadius","(int|mixed $val)","Define the radius value of the circle",2],["Circle::getRadius","Maths\\Geometry\\Circle","Maths\/Geometry\/Circle.html#method_getRadius","()","Get the radius value of the point",2],["Circle::setPointO","Maths\\Geometry\\Circle","Maths\/Geometry\/Circle.html#method_setPointO","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point O (origin) point of the circle",2],["Circle::getPointO","Maths\\Geometry\\Circle","Maths\/Geometry\/Circle.html#method_getPointO","()","Get the O (origin) point of the circle",2],["Circle::getDiameter","Maths\\Geometry\\Circle","Maths\/Geometry\/Circle.html#method_getDiameter","()","",2],["Circle::getArea","Maths\\Geometry\\Circle","Maths\/Geometry\/Circle.html#method_getArea","()","",2],["Circle::getPerimeter","Maths\\Geometry\\Circle","Maths\/Geometry\/Circle.html#method_getPerimeter","()","",2],["Line::__construct","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method___construct","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_a = null, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_b = null, int $space_type = Maths::CARTESIAN_2D)","",2],["Line::__toString","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method___toString","()","Write an algebric function of the line",2],["Line::setPointA","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_setPointA","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point A of the line",2],["Line::getPointA","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_getPointA","()","Get the A point of the line",2],["Line::setPointB","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_setPointB","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point B of the line",2],["Line::getPointB","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_getPointB","()","Get the B point of the line",2],["Line::getSlope","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_getSlope","()","Get the slope of the line: m = (By - Ay) \/ (Bx - Ax)",2],["Line::getYIntercept","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_getYIntercept","()","Get the y-intercept of the line: m = (By - Ay) \/ (Bx",2],["Line::rearrange","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_rearrange","(int $direction = Maths::DIRECTION_POSITIVE)","Rearrange a segment to have [A->B] in requested direction",2],["Line::isVertical","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_isVertical","()","Test if a line is vertical (constant X value)",2],["Line::isHorizontal","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_isHorizontal","()","Test if a line is horizontal (constant Y value)",2],["Line::isValidPoint","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_isValidPoint","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $a)","",2],["Line::getOrdinateByAbscissa","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_getOrdinateByAbscissa","(float $x)","Get the ordinate of a point of the line by its abscissa",2],["Line::getAbscissaByOrdinate","Maths\\Geometry\\Line","Maths\/Geometry\/Line.html#method_getAbscissaByOrdinate","(float $y)","Get the abscissa of a point of the line by its ordinate",2],["Point::__construct","Maths\\Geometry\\Point","Maths\/Geometry\/Point.html#method___construct","(null|mixed $abscissa = null, null|mixed $ordinate = null, null|mixed $applicate = null)","",2],["Point::__toString","Maths\\Geometry\\Point","Maths\/Geometry\/Point.html#method___toString","()","Write a 3D point as `( x , y , z )`",2],["Quadrilateral::__construct","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method___construct","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_a = null, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_b = null, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_c = null, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_d = null, int $space_type = Maths::CARTESIAN_2D)","",2],["Quadrilateral::__toString","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method___toString","()","Force children classes to define a way to `echo` an",2],["Quadrilateral::setPointA","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_setPointA","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point A of the quadrilateral",2],["Quadrilateral::getPointA","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getPointA","()","Get the A point of the quadrilateral",2],["Quadrilateral::setPointB","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_setPointB","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point B of the quadrilateral",2],["Quadrilateral::getPointB","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getPointB","()","Get the B point of the quadrilateral",2],["Quadrilateral::setPointC","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_setPointC","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point C of the quadrilateral",2],["Quadrilateral::getPointC","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getPointC","()","Get the C point of the quadrilateral",2],["Quadrilateral::setPointD","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_setPointD","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point D of the quadrilateral",2],["Quadrilateral::getPointD","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getPointD","()","Get the D point of the quadrilateral",2],["Quadrilateral::getSegmentAB","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getSegmentAB","()","Get the [A->B] segment",2],["Quadrilateral::getSegmentBC","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getSegmentBC","()","Get the [B->C] segment",2],["Quadrilateral::getSegmentCD","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getSegmentCD","()","Get the [C->D] segment",2],["Quadrilateral::getSegmentDA","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getSegmentDA","()","Get the [D->A] segment",2],["Quadrilateral::getSegmentAC","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getSegmentAC","()","Get the [A->C] diagonal segment",2],["Quadrilateral::getSegmentBD","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getSegmentBD","()","Get the [B->D] diagonal segment",2],["Quadrilateral::getFirstDiagonal","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getFirstDiagonal","()","Get the [A->C] diagonal as a Segment with a positive",2],["Quadrilateral::getSecondDiagonal","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_getSecondDiagonal","()","Get the [B->D] diagonal as a Segment with a positive",2],["Quadrilateral::isParallelogram","Maths\\Geometry\\Quadrilateral","Maths\/Geometry\/Quadrilateral.html#method_isParallelogram","()","Test if the quadrilateral is a parallelogram",2],["Rectangle::__construct","Maths\\Geometry\\Rectangle","Maths\/Geometry\/Rectangle.html#method___construct","(null|<abbr title=\"Maths\\Point(s)\">Point(s)<\/abbr> $point_a = null, null|<abbr title=\"Maths\\Point(s)\">Point(s)<\/abbr> $point_b = null, null|<abbr title=\"Maths\\Point(s)\">Point(s)<\/abbr> $point_c = null, null|<abbr title=\"Maths\\Point(s)\">Point(s)<\/abbr> $point_d = null, int $space_type = Maths::CARTESIAN_2D)","",2],["Rectangle::getWidth","Maths\\Geometry\\Rectangle","Maths\/Geometry\/Rectangle.html#method_getWidth","()","Get rectangle's width (by convention width > height)",2],["Rectangle::getHeight","Maths\\Geometry\\Rectangle","Maths\/Geometry\/Rectangle.html#method_getHeight","()","Get rectangle's height (by convention width > height)",2],["Rectangle::getArea","Maths\\Geometry\\Rectangle","Maths\/Geometry\/Rectangle.html#method_getArea","()","",2],["Rectangle::getPerimeter","Maths\\Geometry\\Rectangle","Maths\/Geometry\/Rectangle.html#method_getPerimeter","()","",2],["Rectangle::createFromCoordinates","Maths\\Geometry\\Rectangle","Maths\/Geometry\/Rectangle.html#method_createFromCoordinates","(array $coords)","",2],["Segment::__toString","Maths\\Geometry\\Segment","Maths\/Geometry\/Segment.html#method___toString","()","Write a 3D point as `( x , y , z )`",2],["Segment::getLength","Maths\\Geometry\\Segment","Maths\/Geometry\/Segment.html#method_getLength","()","Get the length of the segment",2],["Segment::getCenter","Maths\\Geometry\\Segment","Maths\/Geometry\/Segment.html#method_getCenter","()","Get the middle of the segment as a `\\Maths\\Geometry\\Point`",2],["Triangle::__construct","Maths\\Geometry\\Triangle","Maths\/Geometry\/Triangle.html#method___construct","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_a = null, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_b = null, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_c = null, int $space_type = Maths::CARTESIAN_2D)","",2],["Triangle::__toString","Maths\\Geometry\\Triangle","Maths\/Geometry\/Triangle.html#method___toString","()","Force children classes to define a way to `echo` an",2],["Triangle::setPointA","Maths\\Geometry\\Triangle","Maths\/Geometry\/Triangle.html#method_setPointA","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point A of the quadrilateral",2],["Triangle::getPointA","Maths\\Geometry\\Triangle","Maths\/Geometry\/Triangle.html#method_getPointA","()","Get the A point of the quadrilateral",2],["Triangle::setPointB","Maths\\Geometry\\Triangle","Maths\/Geometry\/Triangle.html#method_setPointB","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point B of the quadrilateral",2],["Triangle::getPointB","Maths\\Geometry\\Triangle","Maths\/Geometry\/Triangle.html#method_getPointB","()","Get the B point of the quadrilateral",2],["Triangle::setPointC","Maths\\Geometry\\Triangle","Maths\/Geometry\/Triangle.html#method_setPointC","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define point C of the quadrilateral",2],["Triangle::getPointC","Maths\\Geometry\\Triangle","Maths\/Geometry\/Triangle.html#method_getPointC","()","Get the C point of the quadrilateral",2],["Triangle::getSegmentAB","Maths\\Geometry\\Triangle","Maths\/Geometry\/Triangle.html#method_getSegmentAB","()","Get the [A->B] segment",2],["Triangle::getSegmentBC","Maths\\Geometry\\Triangle","Maths\/Geometry\/Triangle.html#method_getSegmentBC","()","Get the [B->C] segment",2],["Triangle::getSegmentCA","Maths\\Geometry\\Triangle","Maths\/Geometry\/Triangle.html#method_getSegmentCA","()","Get the [C->A] segment",2],["TriangleRectangle::__construct","Maths\\Geometry\\TriangleRectangle","Maths\/Geometry\/TriangleRectangle.html#method___construct","()","",2],["TriangleRectangle::createFromWidthAndAlpha","Maths\\Geometry\\TriangleRectangle","Maths\/Geometry\/TriangleRectangle.html#method_createFromWidthAndAlpha","(array $coords)","",2],["TriangleRectangle::getAlpha","Maths\\Geometry\\TriangleRectangle","Maths\/Geometry\/TriangleRectangle.html#method_getAlpha","()","",2],["TriangleRectangle::getBeta","Maths\\Geometry\\TriangleRectangle","Maths\/Geometry\/TriangleRectangle.html#method_getBeta","()","",2],["TriangleRectangle::getHypotenuse","Maths\\Geometry\\TriangleRectangle","Maths\/Geometry\/TriangleRectangle.html#method_getHypotenuse","()","",2],["TriangleRectangle::getArea","Maths\\Geometry\\TriangleRectangle","Maths\/Geometry\/TriangleRectangle.html#method_getArea","()","",2],["TriangleRectangle::getPerimeter","Maths\\Geometry\\TriangleRectangle","Maths\/Geometry\/TriangleRectangle.html#method_getPerimeter","()","",2],["TriangleRectangle::__toString","Maths\\Geometry\\TriangleRectangle","Maths\/Geometry\/TriangleRectangle.html#method___toString","()","Force children classes to define a way to `echo` an",2],["Vector::__toString","Maths\\Geometry\\Vector","Maths\/Geometry\/Vector.html#method___toString","()","Write a vector",2],["Vector::__equationToString","Maths\\Geometry\\Vector","Maths\/Geometry\/Vector.html#method___equationToString","()","Write a vector formula: `||~v|| = sqrt( x^2 + y^2 )`",2],["Vector::setOrigin","Maths\\Geometry\\Vector","Maths\/Geometry\/Vector.html#method_setOrigin","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point)","Define the origin of the vector (point A)",2],["Vector::getOrigin","Maths\\Geometry\\Vector","Maths\/Geometry\/Vector.html#method_getOrigin","()","Get the origin of the vector (point A)",2],["Vector::getDirection","Maths\\Geometry\\Vector","Maths\/Geometry\/Vector.html#method_getDirection","()","Get vector's direction",2],["Vector::getMagnitude","Maths\\Geometry\\Vector","Maths\/Geometry\/Vector.html#method_getMagnitude","()","Get vector's magnitude (length)",2],["Vector::isNull","Maths\\Geometry\\Vector","Maths\/Geometry\/Vector.html#method_isNull","()","Test if a vector is null : [~0] = [A==B]",2],["Vector::createFromOrigin","Maths\\Geometry\\Vector","Maths\/Geometry\/Vector.html#method_createFromOrigin","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point_a)","Create a vector with one point from origin O like `[~",2],["JSXgraph::__construct","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method___construct","($id, array $options = array())","",2],["JSXgraph::__toString","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method___toString","()","",2],["JSXgraph::setOptions","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_setOptions","(array $options)","",2],["JSXgraph::getOptions","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_getOptions","()","",2],["JSXgraph::getOptionsByPrefix","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_getOptionsByPrefix","($prefix)","",2],["JSXgraph::getOption","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_getOption","($index, $default = null)","",2],["JSXgraph::resetOutput","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_resetOutput","()","",2],["JSXgraph::addOutput","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_addOutput","($str)","",2],["JSXgraph::getOutput","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_getOutput","($reset = true)","",2],["JSXgraph::addPoint","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_addPoint","($name, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point, array $options = array(), $alt_name = null, $overload = false)","",2],["JSXgraph::getPoint","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_getPoint","($name)","",2],["JSXgraph::init","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_init","($id)","",2],["JSXgraph::drawBoard","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_drawBoard","($id, array $options = array())","",2],["JSXgraph::drawPoint","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_drawPoint","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point, array $options = array())","",2],["JSXgraph::drawOrigin","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_drawOrigin","(array $options = array())","",2],["JSXgraph::drawHorizontalPoint","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_drawHorizontalPoint","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point, array $options = array())","",2],["JSXgraph::drawVerticalPoint","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_drawVerticalPoint","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point, array $options = array())","",2],["JSXgraph::drawSegment","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_drawSegment","(<a href=\"Maths\/Geometry\/Line.html\"><abbr title=\"Maths\\Geometry\\Line\">Line<\/abbr><\/a> $line, array $options = array())","",2],["JSXgraph::drawQuadrilateral","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_drawQuadrilateral","(<a href=\"Maths\/Geometry\/Quadrilateral.html\"><abbr title=\"Maths\\Geometry\\Quadrilateral\">Quadrilateral<\/abbr><\/a> $quadri, array $options = array())","",2],["JSXgraph::drawCircle","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_drawCircle","(<a href=\"Maths\/Geometry\/Circle.html\"><abbr title=\"Maths\\Geometry\\Circle\">Circle<\/abbr><\/a> $circ, array $options = array())","",2],["JSXgraph::demonstrateThales","Maths\\Helper\\JSXgraph","Maths\/Helper\/JSXgraph.html#method_demonstrateThales","(<a href=\"Maths\/Geometry\/Line.html\"><abbr title=\"Maths\\Geometry\\Line\">Line<\/abbr><\/a> $line1, <a href=\"Maths\/Geometry\/Line.html\"><abbr title=\"Maths\\Geometry\\Line\">Line<\/abbr><\/a> $line2)","",2],["Maths::coordinatesToString","Maths\\Maths","Maths\/Maths.html#method_coordinatesToString","(string|array $coordinates)","",2],["Maths::segmentToString","Maths\\Maths","Maths\/Maths.html#method_segmentToString","(string|array $coordinates_a, string|array $coordinates_b)","",2],["Maths::polygonToString","Maths\\Maths","Maths\/Maths.html#method_polygonToString","()","",2],["Maths::areSameSpace","Maths\\Maths","Maths\/Maths.html#method_areSameSpace","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point1, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point2)","Test if two points are in the same space type",2],["Maths::areSamePoint","Maths\\Maths","Maths\/Maths.html#method_areSamePoint","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point1, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point2)","Test if two points are in the same position",2],["Maths::getLinesIntersection","Maths\\Maths","Maths\/Maths.html#method_getLinesIntersection","(<a href=\"Maths\/Geometry\/Line.html\"><abbr title=\"Maths\\Geometry\\Line\">Line<\/abbr><\/a> $line1, <a href=\"Maths\/Geometry\/Line.html\"><abbr title=\"Maths\\Geometry\\Line\">Line<\/abbr><\/a> $line2)","Get the intersection point between two lines",2],["Maths::arePerpendiculars","Maths\\Maths","Maths\/Maths.html#method_arePerpendiculars","(<a href=\"Maths\/Geometry\/Line.html\"><abbr title=\"Maths\\Geometry\\Line\">Line<\/abbr><\/a> $line1, <a href=\"Maths\/Geometry\/Line.html\"><abbr title=\"Maths\\Geometry\\Line\">Line<\/abbr><\/a> $line2)","Test if two segments are perpendiculars",2],["Maths::areParallels","Maths\\Maths","Maths\/Maths.html#method_areParallels","(<a href=\"Maths\/Geometry\/Line.html\"><abbr title=\"Maths\\Geometry\\Line\">Line<\/abbr><\/a> $line1, <a href=\"Maths\/Geometry\/Line.html\"><abbr title=\"Maths\\Geometry\\Line\">Line<\/abbr><\/a> $line2)","Test if two segments are parallels",2],["Maths::getDirectionByPoints","Maths\\Maths","Maths\/Maths.html#method_getDirectionByPoints","(<a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point1, <a href=\"Maths\/PointInterface.html\"><abbr title=\"Maths\\PointInterface\">PointInterface<\/abbr><\/a> $point2)","Get the directions between two points for each axis",2],["Maths::getDirectionByCoordinates","Maths\\Maths","Maths\/Maths.html#method_getDirectionByCoordinates","(int $a, int $b)","Get the directions between two points",2],["Point1D::__construct","Maths\\Point1D","Maths\/Point1D.html#method___construct","(null|mixed $abscissa = null)","",2],["Point1D::__toString","Maths\\Point1D","Maths\/Point1D.html#method___toString","()","Write a 1D point as `( x )`",2],["Point1D::setAbscissa","Maths\\Point1D","Maths\/Point1D.html#method_setAbscissa","(int|mixed $val)","Define the abscissa value of the point",2],["Point1D::getAbscissa","Maths\\Point1D","Maths\/Point1D.html#method_getAbscissa","()","Get the abscissa value of the point",2],["Point2D::__construct","Maths\\Point2D","Maths\/Point2D.html#method___construct","(null|mixed $abscissa = null, null|mixed $ordinate = null)","",2],["Point2D::__toString","Maths\\Point2D","Maths\/Point2D.html#method___toString","()","Write a 2D point as `( x , y )`",2],["Point2D::setOrdinate","Maths\\Point2D","Maths\/Point2D.html#method_setOrdinate","(int|mixed $val)","Define the ordinate value of the point",2],["Point2D::getOrdinate","Maths\\Point2D","Maths\/Point2D.html#method_getOrdinate","()","Get the ordinate value of the point",2],["Point3D::__construct","Maths\\Point3D","Maths\/Point3D.html#method___construct","(null|mixed $abscissa = null, null|mixed $ordinate = null, null|mixed $applicate = null)","",2],["Point3D::__toString","Maths\\Point3D","Maths\/Point3D.html#method___toString","()","Write a 3D point as `( x , y , z )`",2],["Point3D::setApplicate","Maths\\Point3D","Maths\/Point3D.html#method_setApplicate","(int|mixed $val)","Define the applicate value of the point",2],["Point3D::getApplicate","Maths\\Point3D","Maths\/Point3D.html#method_getApplicate","()","Get the applicate value of the point",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']